@*@{
    ViewData["Title"] = "Home Page";
}

<div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="6000">
    <ol class="carousel-indicators">
        <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
        <li data-target="#myCarousel" data-slide-to="1"></li>
        <li data-target="#myCarousel" data-slide-to="2"></li>
        <li data-target="#myCarousel" data-slide-to="3"></li>
    </ol>
    <p> This is Sagar's Change </p>
    <script type="text/javascript" src="http://k3d.ivank.net/K3D.js"></script>
    <div class="carousel-inner" role="listbox">
        <div class="item active">
            <img src="~/images/ASP-NET-Banners-01.png" alt="ASP.NET" class="img-responsive">
            <div class="container">
                <div class="carousel-caption">
                    <p>
                        Learn how to build ASP.NET apps that can run anywhere.
                        <a class="btn btn-default btn-default" href="http://go.microsoft.com/fwlink/?LinkID=525028&clcid=0x409">
                            Learn More
                        </a>
                    </p>
                </div>
            </div>
        </div>
        <div class="item">
            <img src="~/images/Banner-02-VS.png" alt="Visual Studio" class="img-responsive">
            <div class="container">
                <div class="carousel-caption">
                    <p>
                        There are powerful new features in Visual Studio for building modern web apps.
                        <a class="btn btn-default btn-default" href="http://go.microsoft.com/fwlink/?LinkID=525030&clcid=0x409">
                            Learn More
                        </a>
                    </p>
                </div>
            </div>
        </div>
        <div class="item">
            <img src="~/images/ASP-NET-Banners-02.png" alt="Package Management" class="img-responsive">
            <div class="container">
                <div class="carousel-caption">
                    <p>
                        Bring in libraries from NuGet, Bower, and npm, and automate tasks using Grunt or Gulp.
                        <a class="btn btn-default btn-default" href="http://go.microsoft.com/fwlink/?LinkID=525029&clcid=0x409">
                            Learn More
                        </a>
                    </p>
                </div>
            </div>
        </div>
        <div class="item">
            <img src="~/images/Banner-01-Azure.png" alt="Microsoft Azure" class="img-responsive">
            <div class="container">
                <div class="carousel-caption">
                    <p>
                        Learn how Microsoft's Azure cloud platform allows you to build, deploy, and scale web apps.
                        <a class="btn btn-default btn-default" href="http://go.microsoft.com/fwlink/?LinkID=525027&clcid=0x409">
                            Learn More
                        </a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-3">
        <h2>Application uses</h2>
        <ul>
            <li>Sample pages using ASP.NET 5 (MVC 6)</li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkId=518007">Gulp</a> and <a href="http://go.microsoft.com/fwlink/?LinkId=518004">Bower</a> for managing client-side resources</li>
            <li>Theming using <a href="http://go.microsoft.com/fwlink/?LinkID=398939">Bootstrap</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>New concepts</h2>
        <ul>
            <li><a href="http://go.microsoft.com/fwlink/?LinkId=518008">Conceptual overview of ASP.NET 5</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkId=518008">Fundamentals in ASP.NET 5</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=517849">Client-Side Development using npm, Bower and Gulp</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=517850">Develop on different platforms</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>Customize app</h2>
        <ul>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=398600">Add Controllers and Views</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=398602">Add Data using EntityFramework</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=398603">Add Authentication using Identity</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=517848">Manage client-side packages using Bower/ Gulp</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>Deploy</h2>
        <ul>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=517851">Run your app locally</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=517852">Run your app on .NET Core</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=517853">Run commands in your app</a></li>
            <li><a href="http://go.microsoft.com/fwlink/?LinkID=398609">Publish to Microsoft Azure Web Apps</a></li>
        </ul>
    </div>
</div>*@


<html>
<body></body>
<head>
    <script src="~/js/three.min.js"></script>
    <script src="~/js/OBJLoader.js"></script>
    <script src="~/js/THREEx.WindowResize.js"></script>
    <script src="~/js/OrbitControls.js"></script>
    <script src="~/js/stats.min.js"></script>
    <script src="~/js/script1.js"></script>
    <script src="~/js/MTLLoader.js"></script>
    <script src="~/js/OBJMTLLoader.js"></script>

    <script type="text/javascript">
        var lesson6 = {
            scene: null,
            camera: null,
            renderer: null,
            container: null,
            controls: null,
            clock: null,
            stats: null,

            init: function () { // Initialization
                // create main scene
                this.scene = new THREE.Scene();
                this.scene.fog = new THREE.FogExp2(0xcce0ff, 0.0003);
                
                var SCREEN_WIDTH = window.innerWidth,
                    SCREEN_HEIGHT = window.innerHeight;

                // Prepare Camera 
                var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 1, FAR = 2000;
                this.camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
                this.scene.add(this.camera);
                this.camera.position.set(0, 100, 300);
                this.camera.lookAt(new THREE.Vector3(0, 0, 0));

                // Prepare Renderer
                this.renderer = new THREE.WebGLRenderer({ antialias: true });
                this.renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
                this.renderer.setClearColor(this.scene.fog.color);
                this.renderer.shadowMapEnabled = true;
                this.renderer.shadowMapSoft = true;

                // Prepare Container
                this.container = document.createElement('div');
                document.body.appendChild(this.container);
                this.container.appendChild(this.renderer.domElement);

                // Events
                THREEx.WindowResize(this.renderer, this.camera);

                // Prepare Controls (Orbit Controls)
                this.controls = new THREE.OrbitControls(this.ca, this.renderer.domElement);
                this.controls.target = new THREE.Vector3(0, 0, 0);
                this.controls.maxDistance = 2000;

                // Prepare Clock 
                this.clock = new THREE.Clock();

                // Prepare Stats
                this.stats = new Stats();
                this.stats.domElement.style.position = 'absolute';
                this.stats.domElement.style.left = '50px';
                this.stats.domElement.style.bottom = '50px';
                this.stats.domElement.style.zIndex = 1;
                this.container.appendChild(this.stats.domElement);

                // Add spot light
                var spLight = new THREE.SpotLight(0xffffff, 1.75, 2000, Math.PI / 3);
                spLight.castShadow = true;
                spLight.position.set(-100, 300, -50);
                this.scene.add(spLight);

                // Add Simple ground
                var ground = new THREE.Mesh(new THREE.PlaneGeometry(200, 200, 10, 10), new THREE.MeshLambertMaterial({ color: 0x999999 }));
                ground.receiveShadow = true;
                ground.position.set(0, 0, 0);
                ground.rotation.x = -Math.PI / 2;
                this.scene.add(ground);

                // Load a model
                this.loadModel();
            }, 
            loadModel: function () {
                /*
                var oLoader = new THREE.OBJMTLLoader();
                oLoader.load('C:\ZVerse\AutoBrickProject\DecBrick.OBJ', 'C:\ZVerse\AutoBrickProject\DecBrick.mtl', function(object) {

                object.position.x = -200;
                    object.position.y = 0;
                    object.position.z = 100;
                    object.scale.set(0.1,0.1,0.1);
                    lesson6.scene.add(object);
                
                });
            */
                // Prepare loader and load the model
                var oLoader = new THREE.OBJLoader();
                oLoader.load('C:\ZVerse\AutoBrickProject\DecBrick.OBJ', 'C:\ZVerse\AutoBrickProject\DecBrick.mtl', function (object) {
                    var material2 = new THREE.MeshLambertMaterial({ color: oxa65e00 });

                    object.traverse(function (child) {
                        if (chile instanceof THREE.Mesh) {

                            // Apply custom material
                            chile.material = material2;

                            // Enable casting shadows
                            chile.castShadow = true;
                            child.receiveShadow = true;

                        }

                    });

                    object.position.x = 0;
                    object.position.y = 0;
                    object.position.z = 0;
                    object.scale.set(1, 1, 1);
                    lesson6.scene.add(object);

                });
            }

            
        };
        
        // Animate the Scene
        function  animate() {
            requestAnimationFrame(animate);
            render();
            update();
        }
        
        // Update controls and stats

        function update() {
            lesson6.controls.update(lessong6.clock.getDelta());
            lesson6.stats.update();
        }

        // Render the scene
        function render() {
            if (lesson6.renderer) {
                lesson6.renderer.render(lessong6.scene, lesson6.camera);
            }
        }

        // Initialize lesson on page load
        function initializeLesson() {
            lesson6.init();
            animate();
        }

        if (window.addEventListener)
            window.addEventListener('laod', initializeLesson, false);
        else if (window.attachEvent)
            window.attachEvent('onload', initializeLesson);
        else windowonload = initializeLesson;

        /*
        // Prepare loader and load the model
        var oLoader = new THREE.OBJLoader();
        oLoader.load('C:\ZVerse\AutoBrickProject\DecBrick.OBJ', function (object, materials) {
        var material2 = new THREE.MeshLambertMaterial({ color: oxa65e00 });

            object.traverse(function (child) {
                if (chile instanceof THREE.Mesh) {

                    // Apply custom material
                    chile.material = material2;

                    // Enable casting shadows
                    chile.castShadow = true;
                    child.receiveShadow = true;

                }

            });

            object.position.x = 0;
            object.position.y = 0;
            object.position.z = 0;
            object.scale.set(1, 1, 1);
            lesson6.scene.add(object);

        });
        */
    </script>
  

</head>

</html>

@*<!DOCTYPE html>
<html lang="en">
<head>
    <title>three.js webgl - loaders - OBJ loader</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
        body {
            font-family: Monospace;
            background-color: #000;
            color: #fff;
            margin: 0px;
            overflow: hidden;
        }

        #info {
            color: #fff;
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            z-index: 100;
            display: block;
        }

            #info a, .button {
                color: #f00;
                font-weight: bold;
                text-decoration: underline;
                cursor: pointer;
            }
    </style>
</head>

<body>
    <div id="info">
        <a href="http://threejs.org" target="_blank">three.js</a> - OBJLoader test
    </div>

    <script src="../build/three.min.js"></script>
    <script src="js/loaders/OBJLoader.js"></script>

    <script>
			var container;
			var camera, scene, renderer;
			var mouseX = 0, mouseY = 0;
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			init();
			animate();
			function init() {
				container = document.createElement( 'div' );
				document.body.appendChild( container );
				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
				camera.position.z = 100;
				// scene
				scene = new THREE.Scene();
				var ambient = new THREE.AmbientLight( 0x101030 );
				scene.add( ambient );
				var directionalLight = new THREE.DirectionalLight( 0xffeedd );
				directionalLight.position.set( 0, 0, 1 );
				scene.add( directionalLight );
				// texture
				var manager = new THREE.LoadingManager();
				manager.onProgress = function ( item, loaded, total ) {
					console.log( item, loaded, total );
				};
				var texture = new THREE.Texture();
				var onProgress = function ( xhr ) {
					if ( xhr.lengthComputable ) {
						var percentComplete = xhr.loaded / xhr.total * 100;
						console.log( Math.round(percentComplete, 2) + '% downloaded' );
					}
				};
				var onError = function ( xhr ) {
				};
				var loader = new THREE.ImageLoader( manager );
				loader.load( 'textures/UV_Grid_Sm.jpg', function ( image ) {
					texture.image = image;
					texture.needsUpdate = true;
				} );
				// model
				var loader = new THREE.OBJLoader( manager );
				loader.load( 'obj/male02/male02.obj', function ( object ) {
					object.traverse( function ( child ) {
						if ( child instanceof THREE.Mesh ) {
							child.material.map = texture;
						}
					} );
					object.position.y = - 80;
					scene.add( object );
				}, onProgress, onError );
				//
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				//
				window.addEventListener( 'resize', onWindowResize, false );
			}
			function onWindowResize() {
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}
			function onDocumentMouseMove( event ) {
				mouseX = ( event.clientX - windowHalfX ) / 2;
				mouseY = ( event.clientY - windowHalfY ) / 2;
			}
			//
			function animate() {
				requestAnimationFrame( animate );
				render();
			}
			function render() {
				camera.position.x += ( mouseX - camera.position.x ) * .05;
				camera.position.y += ( - mouseY - camera.position.y ) * .05;
				camera.lookAt( scene.position );
				renderer.render( scene, camera );
			}
    </script>

</body>
</html>*@

@*<html>
<head>
    <script type="text/javascript" src="http://gc.kis.scr.kaspersky-labs.com/1B74BD89-2A22-4B93-B451-1C9E1052A0EC/main.js" charset="UTF-8"></script>
    <script type="text/javascript" src="http://lib.ivank.net/ivank.js"></script>
    <script type="text/javascript" src="http://k3d.ivank.net/K3D.js"></script>
    <script type="text/javascript">

		function Start()
		{
			K3D.load("raptor.obj", loaded);		// loading file ...
		}

		function loaded(data)
		{
			var m = K3D.parse.fromOBJ(data);	// done !
			console.log(m);

			var stage = new Stage("c");
			var s = new Sprite();
			stage.addChild(s);

			s.x = stage.stageWidth/2;
			s.y = stage.stageHeight/2 + 200;
			s.z = 300;
			s.scaleX = s.scaleY = s.scaleZ = 5;

			//	I need to index vertices and UVT with the same indices... 0, 1, 2, ...
			var vts = K3D.edit.unwrap(m.i_verts, m.c_verts, 3);

			//  In my engine, Y goes down, but in my model, Y goes up
			K3D.edit.transform(vts, K3D.mat.scale(1,-1,1));
			var uvt = K3D.edit.unwrap(m.i_uvt  , m.c_uvt  , 2);
			var ind = [];
			for(var i=0; i<m.i_verts.length; i++) ind.push(i);

			s.graphics.beginBitmapFill(new BitmapData("raptor.jpg"));
			s.graphics.drawTriangles3D(vts, ind, uvt);

			stage.addEventListener(Event.ENTER_FRAME,
				function(e) { s.rotationY += 0.01*(stage.mouseX - stage.stageWidth/2); } );
		}
    </script>
</head>
<body onload="Start();">
    <canvas id="c"></canvas>
</body>
</html>*@